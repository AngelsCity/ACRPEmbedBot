// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: guild_values.sql

package postgres

import (
	"context"
	"time"
)

const deleteGuildValue = `-- name: DeleteGuildValue :one
DELETE FROM guild_values WHERE guild_id = $1 AND key = $2 RETURNING guild_id, key, value, created_at
`

type DeleteGuildValueParams struct {
	GuildID string
	Key     string
}

func (q *Queries) DeleteGuildValue(ctx context.Context, arg DeleteGuildValueParams) (GuildValue, error) {
	row := q.db.QueryRowContext(ctx, deleteGuildValue, arg.GuildID, arg.Key)
	var i GuildValue
	err := row.Scan(
		&i.GuildID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const getGuildValue = `-- name: GetGuildValue :one
SELECT guild_id, key, value, created_at FROM guild_values WHERE guild_id = $1 AND key = $2
`

type GetGuildValueParams struct {
	GuildID string
	Key     string
}

func (q *Queries) GetGuildValue(ctx context.Context, arg GetGuildValueParams) (GuildValue, error) {
	row := q.db.QueryRowContext(ctx, getGuildValue, arg.GuildID, arg.Key)
	var i GuildValue
	err := row.Scan(
		&i.GuildID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const getGuildValues = `-- name: GetGuildValues :many
SELECT guild_id, key, value, created_at FROM guild_values WHERE guild_id = $1
`

func (q *Queries) GetGuildValues(ctx context.Context, guildID string) ([]GuildValue, error) {
	rows, err := q.db.QueryContext(ctx, getGuildValues, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GuildValue
	for rows.Next() {
		var i GuildValue
		if err := rows.Scan(
			&i.GuildID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setGuildValue = `-- name: SetGuildValue :one
INSERT INTO guild_values (guild_id, key, value, created_at) VALUES ($1, $2, $3, $4) ON CONFLICT (guild_id, key) DO UPDATE SET value = $3, created_at = $4 RETURNING guild_id, key, value, created_at
`

type SetGuildValueParams struct {
	GuildID   string
	Key       string
	Value     []byte
	CreatedAt time.Time
}

func (q *Queries) SetGuildValue(ctx context.Context, arg SetGuildValueParams) (GuildValue, error) {
	row := q.db.QueryRowContext(ctx, setGuildValue,
		arg.GuildID,
		arg.Key,
		arg.Value,
		arg.CreatedAt,
	)
	var i GuildValue
	err := row.Scan(
		&i.GuildID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}
