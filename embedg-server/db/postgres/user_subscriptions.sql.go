// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user_subscriptions.sql

package postgres

import (
	"context"

	"github.com/lib/pq"
)

const getSubscriptionsForGuild = `-- name: GetSubscriptionsForGuild :many
SELECT id, user_id, status, price_ids, guild_ids FROM user_subscriptions WHERE $1::TEXT = ANY(guild_ids)
`

func (q *Queries) GetSubscriptionsForGuild(ctx context.Context, dollar_1 string) ([]UserSubscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionsForGuild, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSubscription
	for rows.Next() {
		var i UserSubscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			pq.Array(&i.PriceIds),
			pq.Array(&i.GuildIds),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscriptionsForUser = `-- name: GetSubscriptionsForUser :many
SELECT id, user_id, status, price_ids, guild_ids FROM user_subscriptions WHERE user_id = $1
`

func (q *Queries) GetSubscriptionsForUser(ctx context.Context, userID string) ([]UserSubscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSubscription
	for rows.Next() {
		var i UserSubscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			pq.Array(&i.PriceIds),
			pq.Array(&i.GuildIds),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertUserSubscription = `-- name: UpsertUserSubscription :one
INSERT INTO user_subscriptions (id, user_id, status, price_ids, guild_ids) VALUES ($1, $2, $3, $4, $5) ON CONFLICT (id) DO UPDATE SET user_id = $2, status = $3, price_ids = $4 RETURNING id, user_id, status, price_ids, guild_ids
`

type UpsertUserSubscriptionParams struct {
	ID       string
	UserID   string
	Status   string
	PriceIds []string
	GuildIds []string
}

func (q *Queries) UpsertUserSubscription(ctx context.Context, arg UpsertUserSubscriptionParams) (UserSubscription, error) {
	row := q.db.QueryRowContext(ctx, upsertUserSubscription,
		arg.ID,
		arg.UserID,
		arg.Status,
		pq.Array(arg.PriceIds),
		pq.Array(arg.GuildIds),
	)
	var i UserSubscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		pq.Array(&i.PriceIds),
		pq.Array(&i.GuildIds),
	)
	return i, err
}
