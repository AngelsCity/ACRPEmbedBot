// Code generated by sqlc. DO NOT EDIT.
// source: saved_messages.sql

package postgres

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const deleteSavedMessage = `-- name: DeleteSavedMessage :exec
DELETE FROM saved_messages WHERE id = $1 AND owner_id = $2
`

type DeleteSavedMessageParams struct {
	ID      string
	OwnerID string
}

func (q *Queries) DeleteSavedMessage(ctx context.Context, arg DeleteSavedMessageParams) error {
	_, err := q.db.ExecContext(ctx, deleteSavedMessage, arg.ID, arg.OwnerID)
	return err
}

const getSavedMessage = `-- name: GetSavedMessage :one
SELECT id, owner_id, updated_at, name, description, data FROM saved_messages WHERE id = $1 AND owner_id = $2
`

type GetSavedMessageParams struct {
	ID      string
	OwnerID string
}

func (q *Queries) GetSavedMessage(ctx context.Context, arg GetSavedMessageParams) (SavedMessage, error) {
	row := q.db.QueryRowContext(ctx, getSavedMessage, arg.ID, arg.OwnerID)
	var i SavedMessage
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Data,
	)
	return i, err
}

const getSavedMessages = `-- name: GetSavedMessages :many
SELECT id, owner_id, updated_at, name, description, data FROM saved_messages WHERE owner_id = $1
`

func (q *Queries) GetSavedMessages(ctx context.Context, ownerID string) ([]SavedMessage, error) {
	rows, err := q.db.QueryContext(ctx, getSavedMessages, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedMessage
	for rows.Next() {
		var i SavedMessage
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSavedMessage = `-- name: InsertSavedMessage :one
INSERT INTO saved_messages (id, owner_id, updated_at, name, description, data) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, owner_id, updated_at, name, description, data
`

type InsertSavedMessageParams struct {
	ID          string
	OwnerID     string
	UpdatedAt   time.Time
	Name        string
	Description sql.NullString
	Data        json.RawMessage
}

func (q *Queries) InsertSavedMessage(ctx context.Context, arg InsertSavedMessageParams) (SavedMessage, error) {
	row := q.db.QueryRowContext(ctx, insertSavedMessage,
		arg.ID,
		arg.OwnerID,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Data,
	)
	var i SavedMessage
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Data,
	)
	return i, err
}

const updateSavedMessage = `-- name: UpdateSavedMessage :one
UPDATE saved_messages SET updated_at = $3, name = $4, description = $5, data = $6 WHERE id = $1 AND owner_id = $2 RETURNING id, owner_id, updated_at, name, description, data
`

type UpdateSavedMessageParams struct {
	ID          string
	OwnerID     string
	UpdatedAt   time.Time
	Name        string
	Description sql.NullString
	Data        json.RawMessage
}

func (q *Queries) UpdateSavedMessage(ctx context.Context, arg UpdateSavedMessageParams) (SavedMessage, error) {
	row := q.db.QueryRowContext(ctx, updateSavedMessage,
		arg.ID,
		arg.OwnerID,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Data,
	)
	var i SavedMessage
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Data,
	)
	return i, err
}
